link 
https://www.w3schools.com/sql


SELECT - extracts data from a database      
        SELECT column1, column2, ...
        FROM table_name;
        
        select everything
        SELECT * FROM table_name;  
        
        select distinct
        SELECT DISTINCT Country FROM Customers;
        
        count distince
        SELECT COUNT(DISTINCT Country) FROM Customers;
        
        conditional select   = < > <>(or !=) BETWEEN LIKE(pattern) IN AND OR NOT   IS NULL IS NOT NULL
        SELECT * FROM Customers
        WHERE Country='Mexico';
        
        select with asending(default) or descending oder
        SELECT * FROM Customers
        ORDER BY Country ASC, CustomerName DESC;
        
        select limited numver percent or number
        SELECT TOP 30 PERCENT * FROM Customers;
        SELECT TOP 3 * FROM Customers;
        
        select the max or min of col  (as is just renaming)
        SELECT MIN(Price) AS SmallestPrice
        FROM Products;
        
        maths  
        SELECT SUM(Quantity)           or COUNT() AVG()
        FROM OrderDetails;
        
        like  pattern  letter _ a single character  % anything  [] in this  [^] not in this [a-t] all bwtewen
        SELECT * FROM Customers
        WHERE CustomerName LIKE 'a%';
        
        in set
        SELECT * FROM Customers
        WHERE Country IN ('Germany', 'France', 'UK');
        
        bwtween inclusive
        SELECT * FROM Products
        WHERE Price BETWEEN 10 AND 20;
        
        Alias table example
        SELECT o.OrderID, o.OrderDate, c.CustomerName
        FROM Customers AS c, Orders AS o
        WHERE c.CustomerName='Around the Horn' AND c.CustomerID=o.CustomerID;
        
        col example
        SELECT CustomerName, Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS Address
        FROM Customers;
        
        join  (INNER) 
        example
        SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate
        FROM Orders
        INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;
        note 
        (INNER) JOIN: Returns records that have matching values in both tables
        LEFT (OUTER) JOIN: Returns all records from the left table, and the matched records from the right table
        RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table
        FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table
        
        morex example
        SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName
        FROM ((Orders
        INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)
        INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);
        
        self join
        SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City
        FROM Customers A, Customers B
        WHERE A.CustomerID <> B.CustomerID
        AND A.City = B.City
        ORDER BY A.City;
        
        union (use union all to allow dupicate)  (''creat new)
        SELECT 'Customer' AS Type, ContactName, City, Country
        FROM Customers
        UNION
        SELECT 'Supplier', ContactName, City, Country
        FROM Suppliers;
        
       by  ( MAX(), MIN(), SUM(), AVG()) show the first one if no op
        SELECT COUNT(CustomerID), Country
        FROM Customers
        GROUP BY Country
        ORDER BY COUNT(CustomerID) DESC;
        
        having since where cant use on functions
        SELECT COUNT(CustomerID), Country
        FROM Customers
        GROUP BY Country
        HAVING COUNT(CustomerID) > 5
        ORDER BY COUNT(CustomerID) DESC;
        
        exist: 
        SELECT SupplierName
        FROM Suppliers
        WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price < 20);
        
        any/all
        SELECT ProductName
        FROM Products
        WHERE ProductID = ANY
        (SELECT ProductID
        FROM OrderDetails
        WHERE Quantity = 10);
        
        #select new
        SELECT Customers.CustomerName, Orders.OrderID
        INTO CustomersOrderBackup2017
        FROM Customers
        LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID;
        
        #cases when end
        SELECT OrderID, Quantity,
        CASE
        WHEN Quantity > 30 THEN 'The quantity is greater than 30'
        WHEN Quantity = 30 THEN 'The quantity is 30'
        ELSE 'The quantity is under 30'
        END AS QuantityText
        FROM OrderDetails;
        
        SELECT CustomerName, City, Country
        FROM Customers
        ORDER BY
        (CASE
         WHEN City IS NULL THEN Country
        ELSE City
        END);
        
        isnull gives alternative
        SELECT ProductName, UnitPrice * (UnitsInStock + ISNULL(UnitsOnOrder, 0))
         FROM Products;
         
         store and ude procedure
         CREATE PROCEDURE SelectAllCustomers @City nvarchar(30)
         AS
         SELECT * FROM Customers WHERE City = @City
          GO;
          
          EXEC SelectAllCustomers @City = 'London';
         
         
         
UPDATE - updates data in a database
         use set and where
         UPDATE Customers
         SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
         WHERE CustomerID = 1;
         
DELETE - deletes data from a database
         DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';
         
INSERT INTO - inserts new data into a database
              insert with specify col names (dont write for all)
              INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
              VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');
              
              inset selected into
              INSERT INTO Customers (CustomerName, City, Country)
              SELECT SupplierName, City, Country FROM Suppliers;
CREATE DATABASE - creates a new database
              CREATE DATABASE testDB;
              DROP DATABASE testDB;
              
              back up w or wo change
              BACKUP DATABASE testDB
              TO DISK = 'D:\backups\testDB.bak'
              WITH DIFFERENTIAL;
ALTER DATABASE - modifies a database
CREATE TABLE - creates a new table

             CREATE TABLE Persons (
             PersonID int,
             LastName varchar(255),
             FirstName varchar(255),
             Address varchar(255),
             City varchar(255)
             );
             
             use creat as to creatle tab from tab
             CREATE TABLE TestTable AS
             SELECT customername, contactname
             FROM customers;
             
             creat with constraint
             CREATE TABLE table_name (
           column1 datatype constraint,
            column2 datatype constraint,
             column3 datatype constraint,
               ....
              );
             NOT NULL - Ensures that a column cannot have a NULL value
             UNIQUE - Ensures that all values in a column are different
             PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
             FOREIGN KEY - Prevents actions that would destroy links between tables
                             he table with the foreign key is called the child table, and the table with the primary key is called the referenced or p
             CHECK - Ensures that the values in a column satisfies a specific condition
             DEFAULT - Sets a default value for a column if no value is specified
             CREATE INDEX - Used to create and retrieve data from the database very quickly
             
            CREATE TABLE Persons (
            ID int NOT NULL,
            LastName varchar(255) NOT NULL,
             FirstName varchar(255),
            Age int,
            PRIMARY KEY (ID)
             );
             
            
           CREATE TABLE Orders (
           OrderID int NOT NULL,
           OrderNumber int NOT NULL,
           PersonID int,
           PRIMARY KEY (OrderID),
           CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID)
           REFERENCES Persons(PersonID)
           );
           
           CREATE TABLE Persons (
            ID int NOT NULL,
            LastName varchar(255) NOT NULL,
            FirstName varchar(255),
            Age int,
            City varchar(255),
            CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')
           );
           
              CREATE TABLE Orders (
              ID int NOT NULL,
             OrderNumber int NOT NULL,
              OrderDate date DEFAULT GETDATE()   --or fixed val
                );
                
               #may or maynot be unnique
             CREATE UNIQUE INDEX index_name
             ON table_name (column1, column2, ...);
             
             CREATE TABLE Persons (
               Personid int NOT NULL AUTO_INCREMENT,
               LastName varchar(255) NOT NULL,
                FirstName varchar(255),
                 Age int,
            PRIMARY KEY (Personid)
             );
ALTER TABLE - modifies a table

              ALTER TABLE Customers
              ADD Email varchar(255);
              DROP COLUMN Email;
              ALTER COLUMN DateOfBirth year;    (some use MODIFY COLUMN)
              
              ALTER TABLE Persons
              MODIFY Age int NOT NULL;
              
              ALTER TABLE Persons
              ADD UNIQUE (ID)
              
              ALTER TABLE Persons
              ADD PRIMARY KEY (ID);
              
              ALTER TABLE Orders
              ADD CONSTRAINT FK_PersonOrder
              FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);
              
              ALTER TABLE Orders
              DROP CONSTRAINT FK_PersonOrder;
              
              ALTER TABLE Persons
              ADD CONSTRAINT CHK_PersonAge CHECK (Age>=18 AND City='Sandnes');
              
              ALTER TABLE Persons
            ADD CONSTRAINT df_City
            DEFAULT 'Sandnes' FOR City;
             
             ALTER TABLE Persons AUTO_INCREMENT=100;
DROP TABLE - deletes a table
            DROP TABLE Shippers;
            
            ALTER TABLE table_name
            DROP INDEX index_name;
CREATE INDEX - creates an index (search key)
DROP INDEX - deletes an index


comments -- */ /*

CREATE VIEW [Brazil Customers] AS
SELECT CustomerName, ContactName
FROM Customers
WHERE Country = 'Brazil';


